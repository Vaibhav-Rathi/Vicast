// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String?
  email     String     @unique
  password  String
  verified  Boolean    @default(false)
  token     String     @unique
  createdAt DateTime   @default(now())
  Podacst   Podcast[]
  createdBy Schedule[]

  // Recording relationships
  recordingSessions   RecordingSession[]
  recordingChunks     RecordingChunk[]
  sessionParticipants SessionParticipant[]
}

model Podcast {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Schedule {
  id           String   @id @default(cuid())
  title        String
  description  String?
  scheduledAt  DateTime
  createdById  Int
  createdBy    User     @relation(fields: [createdById], references: [id])
  participants String[]
  createdAt    DateTime @default(now())
}

model RecordingSession {
  id         String        @id @default(cuid())
  roomName   String
  sessionKey String        @unique // The room key from your video call
  status     SessionStatus @default(ACTIVE)
  startTime  DateTime      @default(now())
  endTime    DateTime?
  createdBy  Int
  user       User          @relation(fields: [createdBy], references: [id])

  // Relationships
  participants SessionParticipant[]
  chunks       RecordingChunk[]

  @@map("recording_sessions")
}

model SessionParticipant {
  id        String    @id @default(cuid())
  sessionId String
  userId    Int
  username  String // Display name used in the call
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?

  // Relationships
  session RecordingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id])
  chunks  RecordingChunk[]

  @@unique([sessionId, userId])
  @@map("session_participants")
}

model RecordingChunk {
  id            String       @id @default(cuid())
  sessionId     String
  participantId String
  userId        Int
  chunkNumber   Int
  s3Key         String       @unique
  s3Bucket      String
  fileSize      BigInt
  duration      Float? // Duration in seconds
  mimeType      String       @default("video/webm")
  uploadStatus  UploadStatus @default(PENDING)
  uploadedAt    DateTime?
  createdAt     DateTime     @default(now())

  // Relationships
  session     RecordingSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant SessionParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id])

  @@unique([sessionId, participantId, chunkNumber])
  @@map("recording_chunks")
}

// Add this to your schema.prisma file

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  company   String?
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  FAILED
  PROCESSING
}

enum UploadStatus {
  PENDING
  UPLOADING
  COMPLETED
  FAILED
  RETRYING
}
